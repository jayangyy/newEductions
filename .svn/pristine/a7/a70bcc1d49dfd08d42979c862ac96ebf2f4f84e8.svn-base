/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cr.cdrb.web.edu.controllers;

import com.alibaba.fastjson.JSON;
import cr.cdrb.web.edu.domains.easyui.FilterRule;
import cr.cdrb.web.edu.domains.easyui.QueryModel;
import cr.cdrb.web.edu.model.Teacher;
import cr.cdrb.web.edu.security.domains.EduUser;
import cr.cdrb.web.edu.security.domains.Role;
import cr.cdrb.web.edu.services.TeacherService;
import cr.cdrb.web.edu.services.UsersService;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 *
 * @author milord
 */
@Controller
@RequestMapping("teacher/")
public class TeacherController {
    @Resource(name="configMap")
    private Map config;
    
    @Autowired
    TeacherService service;
    
    @RequestMapping(value = "list")
    public String getListPage(HttpServletRequest request) {
        String zjcunitid = (String) config.get("zjcunitid");
        request.setAttribute("zjcunitid", zjcunitid);
        EduUser user = UsersService.GetCurrentUser();
        request.setAttribute("user", user);
        boolean iseduuser = false;
        for (Role r : user.getRoles()) {
            if(r.getRolename().equals("ROLE_EDU"))
                iseduuser = true;
        }
        request.setAttribute("iseduuser", iseduuser);
        boolean iszjcuser = false;
        if(user.getCompanyId().equals(zjcunitid))
            iszjcuser = true;
        request.setAttribute("iszjcuser", iszjcuser);
        request.setAttribute("usercompanyid", user.getCompanyId());
        return "teacher/list";
    }
    @RequestMapping(value = "edit")
    public String getEditPage(HttpServletRequest request) {
        String zjcunitid = (String) config.get("zjcunitid");
        EduUser user = UsersService.GetCurrentUser();
        boolean iszjcuser = false;
        if(user.getCompanyId().equals(zjcunitid))
            iszjcuser = true;
        request.setAttribute("iszjcuser", iszjcuser);
        return "teacher/edit";
    }
    
    @RequestMapping(value = "allTeachers", method = RequestMethod.GET)
    @ResponseBody
    public Object getAllCards(QueryModel model) throws Exception {
        int rows = model.getRows();
        int page = model.getPage();
        String sort = StringUtils.isBlank(model.getSort()) ? "pid" : model.getSort();
        String order = StringUtils.isBlank(model.getOrder()) ? "asc" : model.getOrder();
        List<String> param = new ArrayList<>();
        
        String whereStr = "1=1";
        List<FilterRule> frlist = JSON.parseArray(model.getFilterRules(), FilterRule.class);
        if (frlist != null) {
            for (FilterRule item : frlist) {
                String field = item.getField();
                String op = item.getOp();
                String value = item.getValue();
                switch (op) {
                    case "equals":
                        whereStr += " and " + field + " = ?";
                        param.add(value);
                        break;
                    case "contains":
                        whereStr += " and " + field + " like ?";
                        param.add("%" + value + "%");
                        break;
                    case "less":
                        whereStr += " and " + field + " > ?";
                        param.add(value);
                        break;
                    case "greater":
                        whereStr += " and " + field + " < ?";
                        param.add(value);
                        break;
                    case "custom":
                        break;
                }
            }
        }
        return JSON.toJSONString(service.getTeachersPaging(page, rows, sort, order, whereStr, "", param.toArray()));
    }
    
    @RequestMapping(value = "addTeacher", method = RequestMethod.POST)
    @ResponseBody
    public Object insertSpecialJobCard(Teacher data) throws Exception {
        EduUser user = UsersService.GetCurrentUser();
        data.setOptuserid(user.getUsername());
        data.setOptusername(user.getWorkername());
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        data.setOptdate(df.format(new Date()));
        return service.insertTeacher(data);
    }
    
    @RequestMapping(value = "editTeacher", method = RequestMethod.POST)
    @ResponseBody
    public Object updateTeacher(Teacher data) throws Exception {
        return service.updateTeacher(data);
    }
    
    @RequestMapping(value = "teacher/{pid}", method = RequestMethod.DELETE)
    @ResponseBody
    public Object deleteTeacher(@PathVariable String pid) throws Exception {
        return service.deleteTeacher(pid);
    }
    
    @RequestMapping(value = "teacher/{pid}", method = RequestMethod.GET)
    @ResponseBody
    public Object getTeacherByPid(@PathVariable String pid) throws Exception {
        return service.getTeacherByPid(pid);
    }
}
