/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cr.cdrb.commons.crypt;

import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

/**
 *
 * @author Administrator
 */
public class PublicKeyCrypt {
    private static final String AES = "AES";
    private static final String DES = "DES";
    private static final String UTF8 = "utf-8";
    
    public static  String encryptAES(String content, String key) {
        if(content==null || key==null) return null;
        try {
            KeyGenerator keygen = KeyGenerator.getInstance(AES);
            keygen.init(128, new SecureRandom(key.getBytes(UTF8)));
            SecretKey newkey = new SecretKeySpec(keygen.generateKey().getEncoded(), AES);
            Cipher cipher = Cipher.getInstance(AES);
            cipher.init(Cipher.ENCRYPT_MODE, newkey);
            byte[] aes = cipher.doFinal(content.getBytes(UTF8));
            return Base64.encodeBase64String(aes);
        }
        catch(Exception e) {
            return null;
        }
    }
    
    public static String decryptAES(String content, String key) {
        if(content==null || key==null) return null;
        try {
            KeyGenerator keygen = KeyGenerator.getInstance(AES);
            keygen.init(128, new SecureRandom(key.getBytes(UTF8)));
            SecretKey newkey = new SecretKeySpec(keygen.generateKey().getEncoded(), AES);
            Cipher cipher = Cipher.getInstance(AES);
            cipher.init(Cipher.DECRYPT_MODE, newkey);
            return new String(cipher.doFinal(Base64.decodeBase64(content)), UTF8);
        }
        catch(Exception e) {
            return null;
        }
    }
}
