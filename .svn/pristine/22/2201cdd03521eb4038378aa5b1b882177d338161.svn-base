/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cr.cdrb.web.edu.services;

import cr.cdrb.commons.tools.DateUtil;
import cr.cdrb.web.edu.daointerface.IEduClassDao;
import cr.cdrb.web.edu.daointerface.IEduPlansDao;
import cr.cdrb.web.edu.domains.easyui.DataModel;
import cr.cdrb.web.edu.domains.easyui.QueryModel;
import cr.cdrb.web.edu.domains.educlass.EduClass;
import cr.cdrb.web.edu.domains.educlass.EduNewPost;
import cr.cdrb.web.edu.domains.educlass.EduProf;
import cr.cdrb.web.edu.domains.educlass.EduTrainingCategory;
import cr.cdrb.web.edu.domains.eduplans.EduPlans;
import cr.cdrb.web.edu.services.IServices.IEduClassService;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 *
 * @author Jayang 班级管理服务类
 */
@Service
public class EduClassService implements IEduClassService {

    @Autowired
    IEduClassDao classDao;
    @Autowired
    IEduPlansDao plansDao;

    @Override
    public DataModel addClass(EduClass model) throws SQLException, ParseException {
        if ("1".equals(model.getClasslevel())) {
            int personNum = classDao.getPersonNum(model.getPlan_code());
            EduPlans plan = plansDao.getPlanById(model.getPlan_code());
            if ((plan.getPlan_num() * 1.05) < (personNum + model.getStudentnum())) {
                throw new SQLException("人数超标，培训人数最多不能超过计划人数的百分之五！");
            }
            //日期验证
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getStartdate())) {
                throw new SQLException("班级开始日期不能大于计划结束日期！");
            }
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getEnddate())) {
                throw new SQLException("结束日期不能大于计划结束日期！");
            }
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getSignenddate())) {
                throw new SQLException("报名截止日期不能大于计划结束日期！");
            }
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getTelldate())) {
                throw new SQLException("通知日期不能大于计划结束日期！");
            }
        }

        return classDao.addClass(model) ? new DataModel().withInfo("添加成功") : new DataModel().withErr("添加失败");
    }

    @Override
    public DataModel updateClass(EduClass model) throws SQLException, ParseException {
        if ("1".equals(model.getClasslevel())) {
            int personNum = classDao.getPersonNum(model.getPlan_code());
            EduPlans plan = plansDao.getPlanById(model.getPlan_code());
            if ((Math.round(plan.getPlan_num() * 1.05)) < (personNum + model.getStudentnum())) {
                throw new SQLException("人数超标，培训人数最多不能超过计划人数的百分之五！");
            }
            //日期验证
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getStartdate())) {
                throw new SQLException("班级开始日期不能大于计划结束日期" + plan.getPlan_edate());
            }
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getEnddate())) {
                throw new SQLException("结束日期不能大于计划结束日期！" + plan.getPlan_edate());
            }
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getSignenddate())) {
                throw new SQLException("报名截止日期不能大于计划结束日期！" + plan.getPlan_edate());
            }
            if (!DateUtil.CompareDate(plan.getPlan_sdate().replaceAll("-", "/"), plan.getPlan_edate().replaceAll("-", "/"), model.getTelldate())) {
                throw new SQLException("通知日期不能大于计划结束日期！" + plan.getPlan_edate());
            }
        }
        return classDao.updateClass(model) ? new DataModel().withInfo("修改成功") : new DataModel().withErr("修改失败");
    }

    @Override
    public EduClass getClassSingal(Integer id) throws SQLException {
        return classDao.getClassById(id);
    }

    @Override
    public List<EduClass> getClassList(String... ids) throws SQLException {
        return classDao.getClassList(ids);
    }

    @Override
    public DataModel deleteClass(String ids) throws SQLException {
        return classDao.removeClass(ids) ? new DataModel().withInfo("删除成功") : new DataModel().withErr("删除失败");
    }

    @Override
    public DataModel getClassPages(QueryModel pageModel) throws Throwable {
        Map<Integer, List<EduClass>> resPaging = classDao.getClassPage(pageModel);
        Integer key;
        key = (Integer) resPaging.keySet().toArray()[0];
        return new DataModel().withData(resPaging.get(key), key);
    }

    @Override
    public List<EduProf> getProfs(String id) throws SQLException {
        return classDao.getProfs(id);
    }

    @Override
    public List<EduTrainingCategory> getTrains(String id) throws SQLException {
        return classDao.getTrainnings(id);
    }

    @Override
    public List<EduNewPost> getPosts() throws SQLException {
        return classDao.getNewPosts();
    }
}
