/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cr.cdrb.web.edu.security;

/**
 *
 * @author jayan 登陆成功FILTER
 */
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;

public class CustomLoginHandler extends
        SavedRequestAwareAuthenticationSuccessHandler {

    private final String LOCAL_SERVER_URL = "/home/index";

    protected final Log logger = LogFactory.getLog(this.getClass());

    private RequestCache requestCache = new HttpSessionRequestCache();

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
            HttpServletResponse response, Authentication authentication)
            throws ServletException, IOException {
        super.onAuthenticationSuccess(request, response, authentication);
        //这里可以追加开发人员自己的额外处理
        System.out
                .println("登陆成功，准备跳转!");
        Object redictUrl = request.getSession().getAttribute("callRediretUrl");
        if (request.getSession().getAttribute("callRediretUrl") != null) {
            super.setDefaultTargetUrl(redictUrl.toString());
        } else {
            super.setDefaultTargetUrl(LOCAL_SERVER_URL);
        }
        super.setAlwaysUseDefaultTargetUrl(true);
//        //跳转URL 从SESSION获取
//        SavedRequest savedRequest = requestCache.getRequest(request, response);
//        if (savedRequest == null) {
//            System.out.println("savedRequest is null ");
//            //用户判断是否要使用上次通过session里缓存的回调URL地址  
//            int flag = 0;
//            //通过提交登录请求传递需要回调的URL callCustomRediretUrl  
//            if (request.getSession().getAttribute("callRediretUrl") != null && !"".equals(request.getSession().getAttribute("callRediretUrl"))) {
//                String url = String.valueOf(request.getSession().getAttribute("callRediretUrl"));
//                //若session 存在则需要使用自定义回调的URL 而不是缓存的URL  
//                super.setDefaultTargetUrl(url);
//                super.setAlwaysUseDefaultTargetUrl(true);
//                flag = 1;
//                request.getSession().setAttribute("callRediretUrl", "");
//            }
//            //重设置默认URL为主页地址  
//            if (flag == 0) {
//                super.setDefaultTargetUrl(LOCAL_SERVER_URL);
//            }
//            super.onAuthenticationSuccess(request, response, authentication);
//            return;
//        }
//        //targetUrlParameter 是否存在  
//        String targetUrlParameter = getTargetUrlParameter();
//        if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {
//            requestCache.removeRequest(request, response);
//            super.setAlwaysUseDefaultTargetUrl(false);
//            super.setDefaultTargetUrl("/");
//            super.onAuthenticationSuccess(request, response, authentication);
//            return;
//        }
//        //清除属性  
//        clearAuthenticationAttributes(request);
//        // Use the DefaultSavedRequest URL  
//        String targetUrl = savedRequest.getRedirectUrl();
//        logger.debug("Redirecting to DefaultSavedRequest Url: " + targetUrl);
//        if (targetUrl != null && "".equals(targetUrl)) {
//            targetUrl = LOCAL_SERVER_URL;
//        }
//        getRedirectStrategy().sendRedirect(request, response, targetUrl);
    }

    public void setRequestCache(RequestCache requestCache) {
        this.requestCache = requestCache;
    }

}
