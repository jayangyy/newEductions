/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cr.cdrb.web.edu.services;

import cr.cdrb.web.edu.dao.EmployeeDao;
import cr.cdrb.web.edu.daointerface.IEduPlansDao;
import cr.cdrb.web.edu.daointerface.IPlanReview;
import cr.cdrb.web.edu.domains.easyui.DataModel;
import cr.cdrb.web.edu.domains.easyui.QueryModel;
import cr.cdrb.web.edu.domains.educlass.EduProf;
import cr.cdrb.web.edu.domains.eduplans.EduPlanSearch;
import cr.cdrb.web.edu.domains.eduplans.EduPlanTransfer;
import cr.cdrb.web.edu.domains.eduplans.EduPlans;
import cr.cdrb.web.edu.domains.eduplans.EduPlansTransDto;
import cr.cdrb.web.edu.domains.eduplans.EduReviewSimpleStatus;
import cr.cdrb.web.edu.domains.eduplans.EduReviews;
import cr.cdrb.web.edu.model.Employee;
import cr.cdrb.web.edu.services.IServices.IPlansService;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 *
 * @author Jayang 培训计划服务类
 */
@Service
public class PlanService implements IPlansService {

    @Autowired
    IEduPlansDao plansDao;
    @Autowired
    IPlanReview reviewDao;
    @Autowired
    EmployeeDao employeeDao;

    @Override

    // <editor-fold desc="培训计划制定">
    public DataModel addPlan(EduPlans plan) throws SQLException {
        return plansDao.addPlan(plan) ? new DataModel().withInfo("新增计划成功") : new DataModel().withErr("新增计划失败");
    }

    @Override
    public DataModel updatePlan(EduPlans plan) throws SQLException {
        if (plansDao.hasPlanLoading(plan.getPlan_code())) {
            return new DataModel().withErr("还有待办未完成，不能修改计划！");
        } else {
            return plansDao.updatePlan(plan) ? new DataModel().withInfo("修改计划成功") : new DataModel().withErr("修改计划失败");
        }
    }

    @Override
    public DataModel getPlansPages(EduPlanSearch model) throws Throwable {
        Map<Integer, List<EduPlans>> resPaging = plansDao.getPlansPage(model);
        Integer key;
        key = (Integer) resPaging.keySet().toArray()[0];
        return new DataModel().withData(resPaging.get(key), key);
    }

    @Override
    public DataModel removePlan(String ids) throws SQLException {
        return plansDao.removePlan(ids) ? new DataModel().withInfo("删除计划成功") : new DataModel().withErr("删除计划失败,稍后重试!");
    }

    @Override
    public EduPlans getPlan(String id) throws SQLException {
        return plansDao.getPlanById(id);
    }
    // </editor-fold>

    // <editor-fold desc="培训计划审核">
    @Override
    public DataModel addReview(EduReviews plan) throws SQLException {
        return reviewDao.addReview(plan) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");
    }

    @Override
    public DataModel updateReview(EduReviews plan) throws SQLException {
        return reviewDao.updateReview(plan) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");
    }

    @Override
    public DataModel removeReview(String ids) throws SQLException {
        return reviewDao.removeReview(ids) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");

    }

    @Override
    public DataModel getReviewPage(QueryModel pageModel) throws Throwable {
        Map<Integer, List<EduReviews>> resPaging = reviewDao.getReviewPage(pageModel);
        Integer key;
        key = (Integer) resPaging.keySet().toArray()[0];
        return new DataModel().withData(resPaging.get(key), key);
    }

    @Override
    public EduReviews getReview(String id) throws SQLException {
        return reviewDao.getReviewById(id);
    }

    @Override
    public List<EduReviews> getReviews(Object... params) throws SQLException {
        return reviewDao.getReview(params);
    }
    // </editor-fold>

    @Override
    public List<EduProf> getProfs(Object... uids) throws SQLException {
        return plansDao.getProfs(uids);
    }

    @Override
    public EduPlans getPlanInclude(String id) throws SQLException {
        return plansDao.getPlanInclude(id);
    }

    @Override
    public List<EduPlans> getPlans(Object... id) throws SQLException {
        return plansDao.getPlans(id);
    }

    @Override
    public DataModel transOfficPlan(EduPlans plan) throws SQLException {
        return plansDao.transferPlan(plan) ? new DataModel().withInfo("操作成功") : new DataModel().withErr("操作失败");
    }

    @Override
    public DataModel getEmployeePage(QueryModel pageModel, String unit, String username) throws Throwable {
        String whereSql = " 1=1 ";
        List<String> params = new ArrayList<String>();
        if (unit != null) {
            if (unit.length() > 0) {
                whereSql += "  and dwname=?";
                params.add(unit);
            }
        }
        if (username != null) {
            if (username.length() > 0) {
                whereSql += " and em_name like '%"+username+"%'";
              //  params.add("%"+ username+"%");
            }
        }
        pageModel.setFilterRules(whereSql);
        Map<Integer, List<Employee>> resPaging = employeeDao.getEmployeePaging(pageModel.getPage(), pageModel.getRows(), pageModel.getSort(), pageModel.getOrder(), pageModel.getFilterRules(), pageModel.getSearch(), params.toArray());
        Integer key;
        key = (Integer) resPaging.keySet().toArray()[0];
        return new DataModel().withData(resPaging.get(key), key);
    }

    @Override
    public DataModel overPlan(EduReviews review) throws SQLException {
        if (plansDao.hasPlanLoading(review.getPlan_code())) {
            throw new SQLException("存在待办计划未完成，不能完结！");
        }
        return plansDao.overPlan(review) ? new DataModel().withInfo("操纵成功") : new DataModel().withErr("操作失败");
    }

    @Override
    public DataModel throwPlan(EduReviews review) throws SQLException {
        return plansDao.throwPlan(review) ? new DataModel().withInfo("操纵成功") : new DataModel().withErr("操作失败");
    }

    @Override
    public DataModel getTransPlanPage(EduPlanSearch pageModel) throws Throwable {
        Map<Integer, List<EduPlansTransDto>> resPaging = plansDao.getTransPlanPage(pageModel);
        Integer key;
        key = (Integer) resPaging.keySet().toArray()[0];
        return new DataModel().withData(resPaging.get(key), key);
    }

    @Override
    public DataModel authPassed(EduReviews review) throws SQLException {
        EduPlanTransfer transfer = plansDao.getTransferById(review.getTransfer_code());
        if (transfer == null) {
            throw new SQLException("未找到移交记录");
        }
        if (transfer.getTrans_status() == EduReviewSimpleStatus.经办.getStats()) {
            throw new SQLException("已完成,不能修改！");
        }
        EduPlans plan = plansDao.getPlanById(review.getPlan_code());
        if (plan == null) {
            throw new SQLException("未找到计划");
        }
        if (plan.getPlan_status() == EduReviewSimpleStatus.处室废弃.getStats() || plan.getPlan_status() == EduReviewSimpleStatus.处室经办.getStats()) {
            throw new SQLException("此计划已由处室完结或废弃，不能在做修改！");
        }
        return plansDao.authReview(review) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");
    }

    @Override
    public DataModel authTransfer(List<EduReviews> review, List<EduPlanTransfer> transfers) throws SQLException {

        if (!(review.size() > 0 && transfers.size() > 0)) {
            throw new SQLException("参数不能为空！");
        }
        EduPlanTransfer transfer = plansDao.getTransferById(review.get(0).getTransfer_code());
        if (transfer == null) {
            throw new SQLException("未找到移交记录");
        }
        if (transfer.getTrans_status() == EduReviewSimpleStatus.经办.getStats()) {
            throw new SQLException("已完成,不能修改！");
        }
        EduPlans plan = plansDao.getPlanById(review.get(0).getPlan_code());
        if (plan == null) {
            throw new SQLException("未找到计划");
        }
        if (plan.getPlan_status() == EduReviewSimpleStatus.处室废弃.getStats() || plan.getPlan_status() == EduReviewSimpleStatus.处室经办.getStats()) {
            throw new SQLException("此计划已由处室完结或废弃，不能在做修改！");
        }
        return plansDao.unitsTransfer(review, transfers) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");
    }

    @Override
    public DataModel authBacktop(EduReviews review) throws SQLException {
        EduPlanTransfer transfer = plansDao.getTransferById(review.getTransfer_code());
        if (transfer == null) {
            throw new SQLException("未找到移交记录");
        }
        if (transfer.getTrans_status() == EduReviewSimpleStatus.经办.getStats()) {
            throw new SQLException("已完成,不能修改！");
        }
        EduPlans plan = plansDao.getPlanById(review.getPlan_code());
        if (plan == null) {
            throw new SQLException("未找到计划");
        }
        if (plan.getPlan_status() == EduReviewSimpleStatus.处室废弃.getStats() || plan.getPlan_status() == EduReviewSimpleStatus.处室经办.getStats()) {
            throw new SQLException("此计划已由处室完结或废弃，不能在做修改！");
        }
        return plansDao.authBacktop(review) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");
    }

    @Override
    public DataModel authBackuser(EduReviews review, EduPlanTransfer transfer) throws SQLException {
        EduPlanTransfer transfers = plansDao.getTransferById(review.getTransfer_code());
        if (transfers == null) {
            throw new SQLException("未找到移交记录");
        }
        if (transfer.getTrans_status() == EduReviewSimpleStatus.经办.getStats()) {
            throw new SQLException("已完成，废弃，或由处室完结,不能修改！");
        }
        EduPlans plan = plansDao.getPlanById(review.getPlan_code());
        if (plan == null) {
            throw new SQLException("未找到计划");
        }
        if (plan.getPlan_status() == EduReviewSimpleStatus.处室废弃.getStats() || plan.getPlan_status() == EduReviewSimpleStatus.处室经办.getStats()) {
            throw new SQLException("此计划已由处室完结或废弃，不能在做修改！");
        }
        return plansDao.authBackuser(review, transfer) ? new DataModel().withInfo("执行成功") : new DataModel().withErr("执行失败");
    }
}
