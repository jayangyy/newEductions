/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.e
 */
package cr.cdrb.web.edu.controllers;

import com.alibaba.fastjson.JSON;
import cr.cdrb.commons.file.ImageUtil;
import cr.cdrb.commons.tools.DateUtil;
import cr.cdrb.web.edu.domains.easyui.ComboTree;
import cr.cdrb.web.edu.domains.easyui.DataModel;
import cr.cdrb.web.edu.domains.easyui.QueryModel;
import cr.cdrb.web.edu.domains.educlass.EduProf;
import cr.cdrb.web.edu.domains.eduplans.EduPlanSearch;
import cr.cdrb.web.edu.domains.eduplans.EduPlanTransfer;
import cr.cdrb.web.edu.domains.eduplans.EduPlans;
import cr.cdrb.web.edu.domains.eduplans.EduReviewSimpleStatus;
import cr.cdrb.web.edu.domains.eduplans.EduReviews;
import cr.cdrb.web.edu.domains.eduplans.EduReviewsStatus;
import cr.cdrb.web.edu.security.domains.EduUnit;
import cr.cdrb.web.edu.security.domains.EduUser;
import cr.cdrb.web.edu.services.IServices.IPlansService;
import cr.cdrb.web.edu.services.IServices.IUnitService;
import cr.cdrb.web.edu.services.UsersService;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

/**
 *
 * @author Jayang
 *
 * 培训计划控制器
 */
@Controller
@RequestMapping("/plans")
public class PlansController {
    
    @Autowired
    IPlansService planService;
    @Autowired
    IUnitService unitService;
    @Resource(name = "configMap")
    java.util.HashMap configMap;

    // <editor-fold desc="培训计划制定">
    @RequestMapping(value = "/index", method = RequestMethod.GET)
    public ModelAndView Index() {
        ModelAndView view = new ModelAndView();
        view.setViewName("/plans/index");
        return view;
    }
    
    @RequestMapping(value = "/edit", method = RequestMethod.GET)
    public ModelAndView edit() {
        ModelAndView view = new ModelAndView();
        view.addObject("companyId", UsersService.GetCurrentUser().getCompanyId());
        view.addObject("companypId", UsersService.GetCurrentUser().getCompanypid());
        view.addObject("statusEnum", EduReviewSimpleStatus.getOfficOverStatus());
        view.addObject("editEnum", EduReviewSimpleStatus.待办.getStats());
        view.setViewName("/plans/edit");
        return view;
    }
    
    @RequestMapping(value = "/planView", method = RequestMethod.GET)
    public ModelAndView PlanView() {
        ModelAndView view = new ModelAndView();
        view.addObject("companyId", UsersService.GetCurrentUser().getCompanyId());
        view.addObject("companypId", UsersService.GetCurrentUser().getCompanypid());
        view.setViewName("/plans/planview");
        return view;
    }
    
    @RequestMapping(value = "/selectUser", method = RequestMethod.GET)
    public ModelAndView selectUser() {
        ModelAndView view = new ModelAndView();
        view.addObject("officEnum", EduReviewsStatus.getFinanceAuth());
        view.setViewName("/plans/selectUser");
        return view;
    }
    
    @ResponseBody
    @RequestMapping(value = "/getPlansPage", method = RequestMethod.GET)
    public DataModel getPlansPage(EduPlanSearch model) throws Throwable {
        EduUser user = UsersService.GetCurrentUser();
//        if (model.getPlan_mainid().equalsIgnoreCase("全部单位")) {
//            model.setPlan_mainid(null);
//        }
//        if (model.getPlan_execid().equalsIgnoreCase("全部单位")) {
//            model.setPlan_execid(null);
//        }
        if (!UsersService.IsAdmin()) {
            //限定主办单位为当前处室
            model.setPlan_mainid(UsersService.GetCurrentUser().getCompany());
        }
        return planService.getPlansPages(model);
    }
    
    @ResponseBody
    @RequestMapping(value = "/putPlan", method = RequestMethod.POST)
    public DataModel putPlan(EduPlans plan) throws SQLException {
        return planService.addPlan(plan);
    }
    
    @ResponseBody
    @RequestMapping(value = "/patchPlan", method = RequestMethod.POST)
    public DataModel pathcPlan(EduPlans plan) throws SQLException {
        return planService.updatePlan(plan);
    }
    
    @ResponseBody
    @RequestMapping(value = "/getPlan", method = RequestMethod.GET)
    public EduPlans getPlan(String id) throws SQLException {
        return planService.getPlan(id);
    }

    ///包含关系
    @ResponseBody
    @RequestMapping(value = "/getPlanInclude", method = RequestMethod.GET)
    public EduPlans getPlanInclude(String id) throws SQLException {
        return planService.getPlanInclude(id);
    }
    
    @ResponseBody
    @RequestMapping(value = "/deltePlan", method = RequestMethod.POST)
    public DataModel deltePlan(String id) throws SQLException {
        return planService.removePlan(id);
    }

// </editor-fold>
    // <editor-fold desc="培训计划审核">
    @RequestMapping(value = "/financeIndex", method = RequestMethod.GET)
    public ModelAndView financeIndex() {
        ModelAndView view = new ModelAndView();
        view.addObject("statusEnum", EduReviewsStatus.getFinanceAuth());
        view.setViewName("/finance/index");
        return view;
    }
    // <editor-fold desc="处室操作">

    @ResponseBody
    @RequestMapping(value = "/transOfficPlan", method = RequestMethod.POST)
    public DataModel transOfficPlan(String prof, String plan_code) throws SQLException {
        EduPlans plan = new EduPlans();
        plan.setPlan_status(EduReviewSimpleStatus.处室待办.getStats());
        plan.setPlan_status_cmt(EduReviewSimpleStatus.处室待办.toString());
        plan.setPlan_prof(prof);
        plan.setPlan_code(plan_code);
        EduUser user = UsersService.GetCurrentUser();
        List<EduReviews> list = JSON.parseArray(plan.getPlan_prof(), EduReviews.class);
        List<EduPlanTransfer> trans = new ArrayList<EduPlanTransfer>();
        for (EduReviews item : list) {
            item.setReviewer(user.getWorkername());
            item.setIdcard(user.getUsername());
            item.setPlan_code(plan.getPlan_code());
            item.setReview_status(EduReviewSimpleStatus.待办.ordinal());
            item.setPlan_status_cmt(EduReviewSimpleStatus.待办.toString());
            item.setReview_date(new Date());
            EduPlanTransfer transfer = new EduPlanTransfer();
            transfer.setPlan_code(item.getPlan_code());
            transfer.setTransfer_from_idcard(user.getUsername());
            transfer.setTransfer_from_user(user.getWorkername());
            transfer.setTransfer_from_unit(user.getCompany());
            transfer.setTransfer_from_unitid(user.getCompanyId());
            transfer.setTransfer_to_idcard(item.getReview_to_idcard());
            transfer.setTransfer_to_user(item.getReview_to_user());
            transfer.setTransfer_to_uid(item.getCurrent_unitid());
            transfer.setTransfer_to_unit(item.getCurrent_unit());
            transfer.setTrans_status_cmt(EduReviewSimpleStatus.待办.toString());
            transfer.setTrans_status(EduReviewSimpleStatus.待办.getStats());
            trans.add(transfer);
        }
        plan.setEdureviews(list);
        plan.setPlantranfers(trans);
        return planService.transOfficPlan(plan);
    }
    
    @ResponseBody
    @RequestMapping(value = "/overPlan", method = RequestMethod.POST)
    public DataModel overPlan(String plan_code) throws SQLException {
        EduReviews review = new EduReviews();
        EduUser user = UsersService.GetCurrentUser();
        review.setPlan_code(plan_code);
        review.setIdcard(user.getUsername());
        review.setReview_cmt("");
        review.setReview_url("");
        review.setReview_date(new Date());
        review.setReviewer(user.getWorkername());
        review.setPlan_status_cmt(EduReviewSimpleStatus.处室经办.toString());
        review.setReview_status(EduReviewSimpleStatus.处室经办.getStats());
        return planService.overPlan(review);
    }
    
    @ResponseBody
    @RequestMapping(value = "/throwPlan", method = RequestMethod.POST)
    public DataModel throwPlan(String plan_code) throws SQLException {
        EduReviews review = new EduReviews();
        EduUser user = UsersService.GetCurrentUser();
        review.setPlan_code(plan_code);
        review.setIdcard(user.getUsername());
        review.setReview_cmt("");
        review.setReview_date(new Date());
        review.setReview_url("");
        review.setReviewer(user.getWorkername());
        review.setPlan_status_cmt(EduReviewSimpleStatus.处室废弃.toString());
        review.setReview_status(EduReviewSimpleStatus.处室废弃.getStats());
        return planService.throwPlan(review);
    }
    // </editor-fold>
    // <editor-fold desc="移送单位审核">

    @RequestMapping(value = "/authReview", method = RequestMethod.GET)
    public ModelAndView authReview() {
        ModelAndView view = new ModelAndView();
        view.addObject("user", UsersService.GetCurrentUser().getWorkername());
        view.addObject("card", UsersService.GetCurrentUser().getUsername());
        view.addObject("editEnum", EduReviewSimpleStatus.待办.getStats());
        view.setViewName("/teachreview/auth");
        return view;
    }
    
    @RequestMapping(value = "/teachIndex", method = RequestMethod.GET)
    public ModelAndView teacheIndex() {
        ModelAndView view = new ModelAndView();
        view.addObject("statusEnum", EduReviewsStatus.getTeachAuth());
        view.setViewName("/teachreview/index");
        return view;
    }
    
    @RequestMapping(value = "/authPassedView", method = RequestMethod.GET)
    public ModelAndView authPassedView(String id, String tcode) {
        ModelAndView view = new ModelAndView();
        view.addObject("passedEnum", EduReviewSimpleStatus.经办.getStats());
        view.addObject("passedEnumcmt", EduReviewSimpleStatus.经办);
        view.addObject("user", UsersService.GetCurrentUser());
        view.addObject("transfer_code", tcode);
        view.setViewName("/teachreview/authPassed");
        return view;
    }
    
    @RequestMapping(value = "/authTransView", method = RequestMethod.GET)
    public ModelAndView authTransView(String id, String tcode) {
        ModelAndView view = new ModelAndView();
        view.addObject("passedEnum", EduReviewSimpleStatus.经办.getStats());
        view.addObject("passedEnumcmt", EduReviewSimpleStatus.经办);
        view.addObject("user", UsersService.GetCurrentUser());
        view.addObject("transfer_code", tcode);
        view.setViewName("/teachreview/authTransfer");
        return view;
    }
    
    @RequestMapping(value = "/backTop", method = RequestMethod.GET)
    public ModelAndView backTopView(String id, String tcode) {
        ModelAndView view = new ModelAndView();
        view.addObject("passedEnum", EduReviewSimpleStatus.处室回发.getStats());
        view.addObject("passedEnumcmt", EduReviewSimpleStatus.处室回发);
        view.addObject("user", UsersService.GetCurrentUser());
        view.addObject("transfer_code", tcode);
        view.setViewName("/teachreview/authBack");
        return view;
    }
    
    @RequestMapping(value = "/backUser", method = RequestMethod.GET)
    public ModelAndView backUser(String id, String tcode, String to_user, String to_uid, String to_unit, String to_unitid) {
        ModelAndView view = new ModelAndView();
        view.addObject("passedEnum", EduReviewSimpleStatus.回发.getStats());
        view.addObject("passedEnumcmt", EduReviewSimpleStatus.回发);
        view.addObject("to_user", to_user);
        view.addObject("to_uid", to_uid);
        view.addObject("to_unit", to_unit);
        view.addObject("to_unitid", to_unitid);
        view.addObject("user", UsersService.GetCurrentUser());
        view.addObject("transfer_code", tcode);
        view.setViewName("/teachreview/authBackuser");
        return view;
    }
    
    @ResponseBody
    @RequestMapping(value = "/authPassed", method = RequestMethod.POST)
    public DataModel authPassed(EduReviews review, HttpServletRequest request) throws SQLException {
        EduUnit unit = unitService.getUnit(review.getCurrent_unitid());
        Date currentdate = new Date();
        String url = "./GenePngPics?current_unit=" + review.getCurrent_unit() + "&review_date=" + DateUtil.FormatDate(currentdate) + "&unit_name=" + review.getCurrent_unit();
        review.setReview_date(currentdate);
        review.setReview_url(url);
        return planService.authPassed(review);
    }
///移送单位再移送操作

    @ResponseBody
    @RequestMapping(value = "/authTransfer", method = RequestMethod.POST)
    public DataModel authTransfer(String review, String transfer_people) throws SQLException {
        List<EduPlanTransfer> list = JSON.parseArray(transfer_people, EduPlanTransfer.class);
        List<EduReviews> reviews = JSON.parseArray(review, EduReviews.class);
        for (EduReviews item : reviews) {
            item.setReview_date(new Date());
        }
        for (EduPlanTransfer item : list) {            
            item.setTrans_status_cmt(EduReviewSimpleStatus.待办.toString());
            item.setTrans_status(EduReviewSimpleStatus.待办.getStats());
        }
        return planService.authTransfer(reviews, list);
    }
    
    @ResponseBody
    @RequestMapping(value = "/backTopuser", method = RequestMethod.POST)
    public DataModel backTopuser(EduReviews review) throws SQLException {
        review.setReview_date(new Date());
        return planService.authBacktop(review);
    }
    
    @ResponseBody
    @RequestMapping(value = "/backUpUser", method = RequestMethod.POST)
    public DataModel backUpUser(EduReviews review, EduPlanTransfer transfer) throws SQLException {
        transfer.setTrans_status_cmt(EduReviewSimpleStatus.待办.toString());
        transfer.setTrans_status(EduReviewSimpleStatus.待办.getStats());
        review.setReview_date(new Date());
        return planService.authBackuser(review, transfer);
    }

    ///获取移送单位审核分页数据
    @ResponseBody
    @RequestMapping(value = "/getpReviews", method = RequestMethod.GET)
    public DataModel getpReviews(EduPlanSearch model) throws Throwable {
        EduUser user = UsersService.GetCurrentUser();
        model.setTo_idcard(user.getUsername());
        model.setTo_user(user.getWorkername());
        model.setTo_unit(user.getCompany());
        model.setTo_uid(user.getCompanyId());
        model.setTrans_status(EduReviewSimpleStatus.待办.getStats());
//        if (!UsersService.IsAdmin()) {
//            //限定主办单位为当前处室
//            model.setPlan_mainid(UsersService.GetCurrentUser().getCompany());
//        }
        return planService.getTransPlanPage(model);
    }
    // </editor-fold>

    @RequestMapping(value = "/editReview", method = RequestMethod.GET)
    public ModelAndView editReview() {
        ModelAndView view = new ModelAndView();
        view.setViewName("/plans/editreview");
        return view;
    }
    
    @RequestMapping(value = "/authfReview", method = RequestMethod.GET)
    public ModelAndView authfReview() {
        ModelAndView view = new ModelAndView();
        view.addObject("user", UsersService.GetCurrentUser().getWorkername());
        view.addObject("card", UsersService.GetCurrentUser().getUsername());
        view.setViewName("/finance/auth");
        return view;
    }
    
    @ResponseBody
    @RequestMapping(value = "/getfReviews", method = RequestMethod.GET)
    public DataModel getfReviews(EduPlanSearch model) throws Throwable {
        model.setReviewstatus(EduReviewsStatus.getFinanceStatus());
        return planService.getPlansPages(model);
    }
    
    @ResponseBody
    @RequestMapping(value = "/getReviewPage", method = RequestMethod.GET)
    public DataModel getReviewPage(QueryModel model) throws Throwable {
        return planService.getReviewPage(model);
    }
    
    @ResponseBody
    @RequestMapping(value = "/putReview", method = RequestMethod.POST)
    public DataModel putReview(EduReviews review) throws SQLException {
        review.setReview_date(new Date());
        return planService.addReview(review);
    }
    
    @ResponseBody
    @RequestMapping(value = "/pathcReview", method = RequestMethod.POST)
    public DataModel pathcReview(EduReviews review) throws SQLException {
        return planService.updateReview(review);
    }
    
    @ResponseBody
    @RequestMapping(value = "/getReview", method = RequestMethod.GET)
    public EduReviews getReview(String id) throws SQLException {
        return planService.getReview(id);
    }
    
    @ResponseBody
    @RequestMapping(value = "/delteReview", method = RequestMethod.POST)
    public DataModel delteReview(String id) throws SQLException {
        return planService.removeReview(id);
    }
    
    @ResponseBody
    @RequestMapping(value = "/getTeachAuths", method = RequestMethod.GET)
    public List<ComboTree> getTeachAuths(String flag) throws SQLException {
        return EduReviewsStatus.getTeachAuths(flag);
    }

    // </editor-fold>
    // <editor-fold desc="公用">
    //获取单位
    @ResponseBody
    @RequestMapping(value = "/getUnits", method = RequestMethod.GET)
    public List<EduUnit> getUnits(String uid, String uname, int searchType) throws Throwable {
        String pid = null;
        EduUser user = UsersService.GetCurrentUser();
        if (searchType == 0) {
            //处室
            pid = configMap.get("cspid").toString().replace(",", "','");
            if (!UsersService.IsAdmin()) {
                uid = user.getCompanyId();
            }
        } else if (searchType == 1) {
            //
            pid = configMap.get("zdpid").toString();
        }
        List<EduUnit> list = unitService.getUnits(uid, pid, uname);
        return list;
    }

    // </editor-fold>
    // <editor-fold desc="公用">
    //获取单位
    @ResponseBody
    @RequestMapping(value = "/getUnitPlans", method = RequestMethod.GET)
    public List<EduUnit> getUnitPlans(String uid, String uname, int searchType) throws Throwable {
        String pid = null;
        EduUser user = UsersService.GetCurrentUser();
        if (searchType == 0) {
            //处室
            pid = configMap.get("cspid").toString().replace(",", "','");
            if (!UsersService.IsAdmin()) {
                uid = user.getCompanyId();
            }
        } else if (searchType == 1) {
            //
            pid = configMap.get("zdpid").toString();
        }
        List<EduUnit> list = unitService.getUnits(uid, pid, uname);
        EduUnit unit = new EduUnit();
        unit.setName("全部单位");
        unit.setU_id("");
        unit.setP_id("");
        list.add(0, unit);
        return list;
    }

    // </editor-fold>
    // <editor-fold desc="公用">
    //获取单位
    @ResponseBody
    @RequestMapping(value = "/getOfficUnits", method = RequestMethod.GET)
    public List<EduUnit> getOfficUnits(String uid, String uname, int searchType) throws Throwable {
        String pid = configMap.get("cspid").toString().replace(",", "','") + "','" + configMap.get("zdpid").toString();
        if (searchType == 1) {
            uid = UsersService.GetCurrentUser().getCompanyId();
        }
        List<EduUnit> list = unitService.getUnits(uid, pid, uname);
        EduUnit all = new EduUnit();
        all.setU_id("");
        all.setName("全部单位");
        all.setP_id("");
        list.add(0, all);
        return list;
    }
    
    @ResponseBody
    @RequestMapping(value = "/getEmployeePage", method = RequestMethod.GET)
    public DataModel getEmployeePage(QueryModel model, String offic_unit, String offic_username, int searchType) throws Throwable {
        if (!UsersService.IsAdmin()) {
            if (searchType == 1) {
                offic_unit = UsersService.GetCurrentUser().getCompany();
            }
        }
        return planService.getEmployeePage(model, offic_unit, offic_username);
    }
    
    @ResponseBody
    @RequestMapping(value = "/getProf", method = RequestMethod.GET)
    public List<EduProf> getProfs(String id) throws Throwable {
        return planService.getProfs(id);
    }
    
    @RequestMapping(value = "Upload", method = RequestMethod.POST)
    public void Upload(HttpServletRequest request, HttpServletResponse response) throws IOException {
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        Map<String, MultipartFile> mapLinkList = multipartRequest.getFileMap();
        MultipartFile file = null;
        PrintWriter out = response.getWriter();
        for (String mf : mapLinkList.keySet()) {
            file = mapLinkList.get(mf);
        }
        String fileRootPath = (String) configMap.get("fileUploadPath");
        String filepath = request.getServletContext().getRealPath("/") + "/s/upload/refdoc/" + multipartRequest.getParameterValues("Filename")[0];
        // 文件保存目录路径，可从配置文件读取
        String savePath = filepath;
        
        String saveUrl = request.getRequestURL().toString().replace(request.getRequestURI(), "") + request.getContextPath() + "/s/upload/refdoc/" + multipartRequest.getParameterValues("Filename")[0] + "/" + multipartRequest.getParameterValues("Filename")[0];
        // 文件保存目录URL
        response.setContentType("text/html; charset=UTF-8");
        if (!ServletFileUpload.isMultipartContent(request)) {
            //return ResultEx.Init(false, "请选择文件");
        }
        // 检查目录
        File uploadDir = new File(savePath);
        if (!uploadDir.isDirectory()) {
            uploadDir.mkdir();
            // return ResultEx.Init(false, "上传目录不存在");
        }
        // 检查目录写权限
        if (!uploadDir.canWrite()) {
            //return ResultEx.Init(false, "上传目录没有写权限");
        }
        String fileName = file.getOriginalFilename();
        // imgFile.getOriginalFilename();
        File targetFile = new File(savePath, fileName);
        if (!targetFile.exists()) {
            targetFile.mkdirs();
        }
        try {
            // 保存
            file.transferTo(targetFile);
            out.printf(saveUrl);
        } catch (Exception e) {
            out.printf("false");
            e.printStackTrace();
        }
    }
    //生成公章
    @RequestMapping(value = "GenePngPics", method = RequestMethod.GET)
    public void GenePngPics(HttpServletRequest request, HttpServletResponse response, EduReviews review)
            throws Throwable {
        ImageUtil.createSaveImage(review, request, response);
    }
    // </editor-fold >
}
